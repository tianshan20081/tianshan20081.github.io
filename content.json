{"meta":{"title":"Legere","subtitle":"","description":"","author":"Legere","url":"http://tianshan20081.github.io","root":"/"},"pages":[{"title":"","date":"2020-07-22T13:32:59.010Z","updated":"2020-03-28T15:24:01.000Z","comments":false,"path":"categories/index.html","permalink":"http://tianshan20081.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-07-22T13:32:59.010Z","updated":"2020-03-28T15:23:35.000Z","comments":false,"path":"tags/index.html","permalink":"http://tianshan20081.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C语言结构体长度为0的数组","slug":"C语言结构体长度为0的数组","date":"2022-08-08T09:21:33.442Z","updated":"2022-08-08T09:47:07.085Z","comments":true,"path":"2022/08/08/C语言结构体长度为0的数组/","link":"","permalink":"http://tianshan20081.github.io/2022/08/08/C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E9%95%BF%E5%BA%A6%E4%B8%BA0%E7%9A%84%E6%95%B0%E7%BB%84/","excerpt":"","text":"1234struct Data&#123; int age; char name[0];&#125;","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://tianshan20081.github.io/categories/C-C/"},{"name":"结构体","slug":"C-C/结构体","permalink":"http://tianshan20081.github.io/categories/C-C/%E7%BB%93%E6%9E%84%E4%BD%93/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://tianshan20081.github.io/tags/C-C/"}]},{"title":"Android Studio 如何关联源码","slug":"Android-Studio-如何关联源码","date":"2020-07-29T07:02:12.000Z","updated":"2020-07-29T07:07:15.115Z","comments":true,"path":"2020/07/29/Android-Studio-如何关联源码/","link":"","permalink":"http://tianshan20081.github.io/2020/07/29/Android-Studio-%E5%A6%82%E4%BD%95%E5%85%B3%E8%81%94%E6%BA%90%E7%A0%81/","excerpt":"","text":"源码下载SDK Manager -&gt; 勾选 Show Package Details -&gt; 选择响应版本下面的源码 Source For Android XX -&gt; Apply -&gt; Ok . 进行 源码下载。 选择 App compileSdkVersion 版本号App 的 compileSdkVersion 版本号对应的 源码 需要已经下载成功。 查看 源码点击 Class 查看 源代码。","categories":[],"tags":[{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tianshan20081.github.io/tags/Android-Studio/"},{"name":"源码关联","slug":"源码关联","permalink":"http://tianshan20081.github.io/tags/%E6%BA%90%E7%A0%81%E5%85%B3%E8%81%94/"}]},{"title":"B站视频缓存，导出","slug":"B站视频缓存，导出","date":"2020-06-20T10:02:30.000Z","updated":"2020-06-20T11:58:31.000Z","comments":true,"path":"2020/06/20/B站视频缓存，导出/","link":"","permalink":"http://tianshan20081.github.io/2020/06/20/B%E7%AB%99%E8%A7%86%E9%A2%91%E7%BC%93%E5%AD%98%EF%BC%8C%E5%AF%BC%E5%87%BA/","excerpt":"","text":"Android 缓存 B 站视频Android 手机存储位置 /sdcard/Android/data/tv.danmaku.bili/download 导出视频信息adb pull /sdcard/Android/data/tv.danmaku.bili/download 安装 ffmpegbrew install ffmpeg 123456789101112131415 # ffmpeg --versionffmpeg version 4.2.3 Copyright (c) 2000-2020 the FFmpeg developers built with Apple clang version 11.0.3 (clang-1103.0.32.59) configuration: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;ffmpeg&#x2F;4.2.3_1 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc&#x3D;clang --host-cflags&#x3D;-fno-stack-check --host-ldflags&#x3D; --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librtmp --enable-libspeex --enable-libsoxr --enable-videotoolbox --disable-libjack --disable-indev&#x3D;jack libavutil 56. 31.100 &#x2F; 56. 31.100 libavcodec 58. 54.100 &#x2F; 58. 54.100 libavformat 58. 29.100 &#x2F; 58. 29.100 libavdevice 58. 8.100 &#x2F; 58. 8.100 libavfilter 7. 57.100 &#x2F; 7. 57.100 libavresample 4. 0. 0 &#x2F; 4. 0. 0 libswscale 5. 5.100 &#x2F; 5. 5.100 libswresample 3. 5.100 &#x2F; 3. 5.100 libpostproc 55. 5.100 &#x2F; 55. 5.100Unrecognized option &#39;-version&#39;.Error splitting the argument list: Option not found 合成视频查看 每个视频 缓存信息 12345678910 #xxxxx&#x2F;220  tree.├── 64│ ├── audio.m4s│ ├── index.json│ └── video.m4s├── danmaku.xml└── entry.json1 directory, 5 files 查看文件 video.m4s 内容123456789101112131415161718192021222324252627 #&#x2F;64  ffprobe -print_format json video.m4sffprobe version 4.2.3 Copyright (c) 2007-2020 the FFmpeg developers built with Apple clang version 11.0.3 (clang-1103.0.32.59) configuration: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;ffmpeg&#x2F;4.2.3_1 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc&#x3D;clang --host-cflags&#x3D;-fno-stack-check --host-ldflags&#x3D; --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librtmp --enable-libspeex --enable-libsoxr --enable-videotoolbox --disable-libjack --disable-indev&#x3D;jack libavutil 56. 31.100 &#x2F; 56. 31.100 libavcodec 58. 54.100 &#x2F; 58. 54.100 libavformat 58. 29.100 &#x2F; 58. 29.100 libavdevice 58. 8.100 &#x2F; 58. 8.100 libavfilter 7. 57.100 &#x2F; 7. 57.100 libavresample 4. 0. 0 &#x2F; 4. 0. 0 libswscale 5. 5.100 &#x2F; 5. 5.100 libswresample 3. 5.100 &#x2F; 3. 5.100 libpostproc 55. 5.100 &#x2F; 55. 5.100&#123;Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;video.m4s&#39;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf57.71.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:12:09.05, start: 0.092000, bitrate: 157 kb&#x2F;s Stream #0:0(und): Video: h264 (High) (avc1 &#x2F; 0x31637661), yuv420p, 1280x720, 1 kb&#x2F;s, 15 fps, 15 tbr, 16k tbn, 30 tbc (default) Metadata: handler_name : VideoHandler&#125; 查看文件 audio.m4s 内容123456789101112131415161718192021222324252627 # ffprobe -print_format json audio.m4sffprobe version 4.2.3 Copyright (c) 2007-2020 the FFmpeg developers built with Apple clang version 11.0.3 (clang-1103.0.32.59) configuration: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;ffmpeg&#x2F;4.2.3_1 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc&#x3D;clang --host-cflags&#x3D;-fno-stack-check --host-ldflags&#x3D; --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librtmp --enable-libspeex --enable-libsoxr --enable-videotoolbox --disable-libjack --disable-indev&#x3D;jack libavutil 56. 31.100 &#x2F; 56. 31.100 libavcodec 58. 54.100 &#x2F; 58. 54.100 libavformat 58. 29.100 &#x2F; 58. 29.100 libavdevice 58. 8.100 &#x2F; 58. 8.100 libavfilter 7. 57.100 &#x2F; 7. 57.100 libavresample 4. 0. 0 &#x2F; 4. 0. 0 libswscale 5. 5.100 &#x2F; 5. 5.100 libswresample 3. 5.100 &#x2F; 3. 5.100 libpostproc 55. 5.100 &#x2F; 55. 5.100&#123;Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;audio.m4s&#39;: Metadata: major_brand : iso5 minor_version : 1 compatible_brands: avc1iso5dsmsmsixdash encoder : Lavf57.71.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:12:09.11, start: 0.000000, bitrate: 97 kb&#x2F;s Stream #0:0(und): Audio: aac (LC) (mp4a &#x2F; 0x6134706D), 44100 Hz, stereo, fltp, 0 kb&#x2F;s (default) Metadata: handler_name : SoundHandler&#125; 使用 java 进行 合成1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import com.alibaba.fastjson.JSONObject;import javafx.util.Pair;import java.io.File;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Paths;import java.util.Arrays;import java.util.List;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.ThreadPoolExecutor;import java.util.concurrent.TimeUnit;public class CombineBilibiliViewo &#123; public static void main(String[] args) &#123; String srcCachePath = \"100\"; String mp4OutputPath = \"mp4\"; final File projectFolder = new File(srcCachePath); /* 获取到第一级目录 */ final File[] files = projectFolder.listFiles(pathname -&gt; !pathname.getName().contains(\".DS_Store\")); final ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor( 1, 4, 30, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;&gt;(files.length)); Arrays.asList(files) .stream() .forEach(file -&gt; &#123; poolExecutor.submit(() -&gt; &#123; try &#123; final File entity = new File(file, \"entry.json\"); final Pair&lt;String, String&gt; pair = getFileNameFromEntryJson(entity.getAbsolutePath()); String fileName = pair.getValue(); final String typeTag = pair.getKey(); final String videoPath = file.getAbsolutePath(); String audioM4s = videoPath + File.separator + typeTag + File.separator + \"audio.m4s\"; String videoM4s = videoPath + File.separator + typeTag + File.separator + \"video.m4s\"; String targetFilePath = mp4OutputPath + File.separator + fileName.replaceAll(\" \", \"-\"); combineVideo(file.getName(), audioM4s, videoM4s, targetFilePath); &#125; catch (Exception e) &#123; System.err.println(e.getMessage()); &#125; &#125;); &#125;); poolExecutor.shutdown(); &#125; private static Pair&lt;String, String&gt; getFileNameFromEntryJson(String absolutePath) &#123; try &#123; final List&lt;String&gt; strings = Files.readAllLines(Paths.get(absolutePath), StandardCharsets.UTF_8); final String content = String.join(\"\", strings); final JSONObject parse = (JSONObject) JSONObject.parse(content); final String typeTag = parse.getString(\"type_tag\"); final JSONObject pageData = parse.getJSONObject(\"page_data\"); final String part = pageData.getString(\"part\"); return new Pair(typeTag, part); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; public static boolean isFileExists(String filePath) &#123; final File file = new File(java.lang.String.valueOf(filePath)); if (file.exists() &amp;&amp; file.isFile()) &#123; return true; &#125; return false; &#125; private static void combineVideo(String index, String audioM4s, String videoM4s, String destFilePath) &#123; if (!isFileExists(audioM4s)) &#123; throw new RuntimeException(\"文件不存在:\" + audioM4s); &#125; if (!isFileExists(videoM4s)) &#123; throw new RuntimeException(\"文件不存在:\" + videoM4s); &#125; try &#123; final String command = String.format(\"ffmpeg -i %s -i %s -vcodec copy -acodec copy %s.mp4\", audioM4s, videoM4s, destFilePath); Runtime.getRuntime().exec(command); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 查看 合并完成后的文件信息123456789101112131415161718192021222324252627282930 # ffprobe -print_format json xxx.mp4ffprobe version 4.2.3 Copyright (c) 2007-2020 the FFmpeg developers built with Apple clang version 11.0.3 (clang-1103.0.32.59) configuration: --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;ffmpeg&#x2F;4.2.3_1 --enable-shared --enable-pthreads --enable-version3 --enable-avresample --cc&#x3D;clang --host-cflags&#x3D;-fno-stack-check --host-ldflags&#x3D; --enable-ffplay --enable-gnutls --enable-gpl --enable-libaom --enable-libbluray --enable-libdav1d --enable-libmp3lame --enable-libopus --enable-librubberband --enable-libsnappy --enable-libsrt --enable-libtesseract --enable-libtheora --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxvid --enable-lzma --enable-libfontconfig --enable-libfreetype --enable-frei0r --enable-libass --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librtmp --enable-libspeex --enable-libsoxr --enable-videotoolbox --disable-libjack --disable-indev&#x3D;jack libavutil 56. 31.100 &#x2F; 56. 31.100 libavcodec 58. 54.100 &#x2F; 58. 54.100 libavformat 58. 29.100 &#x2F; 58. 29.100 libavdevice 58. 8.100 &#x2F; 58. 8.100 libavfilter 7. 57.100 &#x2F; 7. 57.100 libavresample 4. 0. 0 &#x2F; 4. 0. 0 libswscale 5. 5.100 &#x2F; 5. 5.100 libswresample 3. 5.100 &#x2F; 3. 5.100 libpostproc 55. 5.100 &#x2F; 55. 5.100&#123;Input #0, mov,mp4,m4a,3gp,3g2,mj2, from &#39;xxxx.mp4&#39;: Metadata: major_brand : isom minor_version : 512 compatible_brands: isomiso2avc1mp41 encoder : Lavf58.29.100 description : Packed by Bilibili XCoder v2.0.2 Duration: 00:31:25.88, start: 0.000000, bitrate: 333 kb&#x2F;s Stream #0:0(und): Video: h264 (High) (avc1 &#x2F; 0x31637661), yuv420p, 1280x720, 233 kb&#x2F;s, 15 fps, 15 tbr, 16k tbn, 30 tbc (default) Metadata: handler_name : VideoHandler Stream #0:1(und): Audio: aac (LC) (mp4a &#x2F; 0x6134706D), 44100 Hz, stereo, fltp, 96 kb&#x2F;s (default) Metadata: handler_name : SoundHandler&#125;","categories":[],"tags":[]},{"title":"快速发布DockerCompose","slug":"快速发布DockerCompose","date":"2020-05-25T02:16:23.000Z","updated":"2020-05-25T02:28:38.000Z","comments":true,"path":"2020/05/25/快速发布DockerCompose/","link":"","permalink":"http://tianshan20081.github.io/2020/05/25/%E5%BF%AB%E9%80%9F%E5%8F%91%E5%B8%83DockerCompose/","excerpt":"","text":"基本信息1234 # docker --versionDocker version 19.03.8, build afacb8b # docker-compose --versiondocker-compose version 1.25.5, build 8a1c60f6 创建工程1234567 # tree.├── docker-compose.yml└── product ├── Dockerfile ├── api.py └── requirements.txt product/api.py 1234567891011121314from flask import Flaskfrom flask_restful import Resource, Apiapp = Flask(__name__)api = Api(app)class Product(Resource): def get(self): return &#123;'product': [ \"Java\", \"Elixir\",\"Flutter\"]&#125;api.add_resource(Product, \"/\")if __name__ == \"__main__\": app.run(host='0.0.0.0', port=80) product/requirements.txt 12Flask&#x3D;&#x3D;0.12.0flask-restful&#x3D;&#x3D;0.3.5 Dockerfile 123FROM python:3-onbuildCOPY . /usr/src/appCMD [\"python\",\"api.py\"] docker-compose.yml 123456789version: '3.6'services: product-service-py: build: ./product volumes: - ./product:/usr/src/app ports: - 5001:80 启动服务12345# docker-compose -f docker-compose.yml upStarting docker-flask_product-service-py_1 ... doneAttaching to docker-flask_product-service-py_1product-service-py_1 | * Running on http:&#x2F;&#x2F;0.0.0.0:80&#x2F; (Press CTRL+C to quit)product-service-py_1 | 172.18.0.1 - - [25&#x2F;May&#x2F;2020 02:26:37] &quot;GET &#x2F; HTTP&#x2F;1.1&quot; 200 - 访问服务 http://localhost:5001 1&#123; \"product\": [\"Java\", \"Elixir\", \"Flutter\"] &#125;","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://tianshan20081.github.io/tags/Docker/"},{"name":"Docker-compose","slug":"Docker-compose","permalink":"http://tianshan20081.github.io/tags/Docker-compose/"},{"name":"Flask","slug":"Flask","permalink":"http://tianshan20081.github.io/tags/Flask/"}]},{"title":"Mac 开机自启动 Jenkins","slug":"Mac-开机自启动-Jenkins","date":"2020-04-23T03:10:48.000Z","updated":"2020-04-23T04:20:00.000Z","comments":true,"path":"2020/04/23/Mac-开机自启动-Jenkins/","link":"","permalink":"http://tianshan20081.github.io/2020/04/23/Mac-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8-Jenkins/","excerpt":"","text":"下载 JenkinsJenkins https://jenkins.io/ 下载 war 安装包 版本号 2.22.1 下载连接 Jenkins.war 重命名 为jenkins_2.222.1.war 存放路径 ~/Dev/bin/jenkins/jenkins_2.222.1.war 启动脚本脚本内容~/Dev/bin/jenkins/startupJenkins.sh 123456789101112port&#x3D;8080#根据端口号查询对应的pidpid&#x3D;$(netstat -anvp tcp | grep $port | awk &#39;&#123;print $9&#125;&#39; | awk -F&quot;&#x2F;&quot; &#39;&#123; print $1 &#125;&#39;);#杀掉对应的进程，如果pid不存在，则不执行if [ -n &quot;$pid&quot; ]; then echo &quot;查询到占用端口号:$port 的应用PID: $pid &quot;; kill -9 $pid;fiecho &quot;Jenkins Start ... &quot;nohup java -jar ~&#x2F;Dev&#x2F;bin&#x2F;jenkins&#x2F;jenkins_2.222.1.war &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp; 脚本添加权限chmod 777 startupJenkins.sh 修改 startupJenkins.sh 文件的打开方式右击 -&gt; 打开方式 -&gt; 其他 -&gt; 实用工具 -&gt; 终端 添加开机启动项偏好设置 -&gt; 用户与群组 -&gt; 登录项 -&gt; 添加 -&gt; 选择 startupJenkins.sh 重启 Mac 测试浏览器打开 http://127.0.0.1:8080","categories":[{"name":"Mac","slug":"Mac","permalink":"http://tianshan20081.github.io/categories/Mac/"},{"name":"Jenkins","slug":"Mac/Jenkins","permalink":"http://tianshan20081.github.io/categories/Mac/Jenkins/"}],"tags":[{"name":"Mac","slug":"Mac","permalink":"http://tianshan20081.github.io/tags/Mac/"},{"name":"Mac 开机自启动","slug":"Mac-开机自启动","permalink":"http://tianshan20081.github.io/tags/Mac-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://tianshan20081.github.io/tags/Jenkins/"}]},{"title":"ESLint 入门","slug":"ESLint-入门","date":"2020-04-22T10:51:20.000Z","updated":"2020-04-22T11:24:41.000Z","comments":true,"path":"2020/04/22/ESLint-入门/","link":"","permalink":"http://tianshan20081.github.io/2020/04/22/ESLint-%E5%85%A5%E9%97%A8/","excerpt":"","text":"ESLint 可组装的 JavaScript 和 JSX 检查工具 创建工程 创建文件夹 tutorial01 并进入 mkdir tutorial01 &amp;&amp; cd $_ yarn 初始化工程 tyarn init -y 安装 eslint ·tyarn add eslint -D 使用 VSCode 打开工程 12345678910111213141516171819# mkdir tutorial01 &amp;&amp; cd $_tutorial01 # tyarn init -y &amp;&amp; tyarn add eslint -D &amp;&amp; code .yarn init v1.22.4warning The yes flag has been set. This will automatically answer yes to all questions, which may have security implications.success Saved package.json✨ Done in 0.04s.yarn add v1.22.4info No lockfile found.[1&#x2F;4] 🔍 Resolving packages...[2&#x2F;4] 🚚 Fetching packages...[3&#x2F;4] 🔗 Linking dependencies...[4&#x2F;4] 🔨 Building fresh packages...success Saved lockfile.......├─ word-wrap@1.2.3└─ write@1.0.3✨ Done in 10.86s. eslint init12345678# eslint --init? How would you like to use ESLint? To check syntax and find problems? What type of modules does your project use? None of these? Which framework does your project use? None of these? Does your project use TypeScript? No? Where does your code run? Browser? What format do you want your config file to be in? JavaScriptSuccessfully created .eslintrc.js file in tutorial01 生成文件.eslintrc.js 123456789101112131415module.exports = &#123; env: &#123; browser: true, es6: true, &#125;, extends: 'eslint:recommended', globals: &#123; Atomics: 'readonly', SharedArrayBuffer: 'readonly', &#125;, parserOptions: &#123; ecmaVersion: 2018, &#125;, rules: &#123;&#125;,&#125;; 编写测试代码index.js 1234function sayHello() &#123; console.log('Hello'); return 'Hello';&#125; 123456# eslint src&#x2F;index.js&#x2F;tutorial01&#x2F;src&#x2F;index.js 1:10 error &#39;sayHello&#39; is defined but never used no-unused-vars✖ 1 problem (1 error, 0 warnings) 错误信息： sayHello 方法定义了但是未被使用 修复 删除未被使用的代码 修改校验规则 .eslintrc.js rules 添加规则，关闭该异常信息提示 12345678rules: &#123; // 定义了未被使用的 方法，变量等 'no-unused-vars': 'off', // 只能使用 单引号 quotes: ['error', 'single'], // 行尾 加分号 semi: ['error'],&#125;,","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"http://tianshan20081.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ESLint","slug":"ESLint","permalink":"http://tianshan20081.github.io/tags/ESLint/"}]},{"title":"Android Native 集成 Flutter 1.12.13","slug":"Android-Native-集成-Flutter-1-12-13","date":"2020-04-22T10:13:20.000Z","updated":"2020-04-22T10:45:37.000Z","comments":true,"path":"2020/04/22/Android-Native-集成-Flutter-1-12-13/","link":"","permalink":"http://tianshan20081.github.io/2020/04/22/Android-Native-%E9%9B%86%E6%88%90-Flutter-1-12-13/","excerpt":"","text":"环境信息123456 # flutter doctor -v[✓] Flutter (Channel stable, v1.12.13+hotfix.9, on Mac OS X 10.15.4 19E287, locale zh-Hans-CN) • Flutter version 1.12.13+hotfix.9 at &#x2F;Users&#x2F;mz&#x2F;Dev&#x2F;bin&#x2F;flutter • Framework revision f139b11009 (3 周前), 2020-03-30 13:57:30 -0700 • Engine revision af51afceb8 • Dart version 2.7.2 创建 Android 工程基本信息:项目名称 Flutter_Android ….略过 注意: com.android.application 所在 Module 名称 必须为 app 创建 Flutter Module基本信息:项目名称 flutter_module ….略过 Android 工程集成 Flutter Module修改 Android settings.gradle 文件12345678910rootProject.name = 'Flutter_Android'include ':app'setBinding(new Binding([gradle: this]))evaluate(new File( settingsDir, /* 注意这里需要使用 相对路径 */ '../flutter_module/.android/include_flutter.groovy')) 注意: ../flutter_module/.android/include_flutter.groovy 需要使用 相对路径。 Android 工程添加依赖app/build.gradle implementation project(path: &#39;:flutter&#39;) Android 调用 Flutter打开默认工程123456789101112public void jumpFlutterDefaultPage(View view) &#123; String FLUTTER_ENGINE = \"flutter_engine\"; FlutterEngine flutterEngine = new FlutterEngine(this); flutterEngine.getDartExecutor().executeDartEntrypoint(DartExecutor.DartEntrypoint.createDefault()); FlutterEngineCache.getInstance().put(FLUTTER_ENGINE, flutterEngine); FlutterActivity.CachedEngineIntentBuilder cachedEngineIntentBuilder = FlutterActivity.withCachedEngine(FLUTTER_ENGINE); startActivity(cachedEngineIntentBuilder.build(this));&#125; 打开 Main 页面12345public void jumpFlutterMain(View view) &#123; startActivity(FlutterActivity.withNewEngine() .initialRoute(\"main\") .build(this));&#125; 打开我的页面1234567public void jumpFlutterMine(View view) &#123; startActivity(FlutterActivity.withNewEngine() .initialRoute(\"mine\") .build(this));&#125; 以 View 的方式加载1234567891011121314public void jumpFlutterView(View view) &#123; FlutterView flutterView = new FlutterView(this); FrameLayout framelayout = findViewById(R.id.framelayout); FlutterEngine flutterEngine = new FlutterEngine(this); flutterEngine.getDartExecutor().executeDartEntrypoint( new DartExecutor.DartEntrypoint(FlutterMain.findAppBundlePath(), \"mine\") ); flutterView.attachToFlutterEngine(flutterEngine); framelayout.addView(flutterView);&#125; Flutter 代码main.dart 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import 'dart:ui';import 'package:flutter/material.dart';import 'package:fluttermodule/pages/MinePage.dart';void main() =&gt; runApp(MyApp());void mine() =&gt; runApp(MineApp());class MineApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return MaterialApp( title: \"Mine App\", home: MinePage(), ); &#125;&#125;class MyApp extends StatelessWidget &#123; // This widget is the root of your application. @override Widget build(BuildContext context) &#123; return MaterialApp( title: 'Flutter Demo', theme: ThemeData( // This is the theme of your application. // // Try running your application with \"flutter run\". You'll see the // application has a blue toolbar. Then, without quitting the app, try // changing the primarySwatch below to Colors.green and then invoke // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\", // or press Run &gt; Flutter Hot Reload in a Flutter IDE). Notice that the // counter didn't reset back to zero; the application is not restarted. primarySwatch: Colors.blue, ), home: _getWidgetByRoute(window.defaultRouteName),// routes: &lt;String, WidgetBuilder&gt;&#123;// \"main\": (context) =&gt; MyHomePage(),// \"mine\": (context) =&gt; MinePage(),// &#125;,// onUnknownRoute: (RouteSettings settings) &#123;// return new PageRouteBuilder(pageBuilder: (BuildContext context, _, __) &#123;// return MyHomePage(title: \"Home Page\");// &#125;);// &#125;, ); &#125; Widget _getWidgetByRoute(String defaultRouteName) &#123; print(\"_getWidgetByRoute:\" + defaultRouteName); if (\"/\" == defaultRouteName || \"main\" == defaultRouteName) &#123; return MyHomePage(title: \"Home page\"); &#125; else if (\"mine\" == defaultRouteName) &#123; return MinePage(); &#125; return Center( child: Text(\"Default Page\"), ); &#125;&#125; MinePage.dart 12345678910import 'package:flutter/material.dart';class MinePage extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return Center( child: Text(\"Mine Page\"), ); &#125;&#125;","categories":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/categories/Android/"},{"name":"Flutter","slug":"Android/Flutter","permalink":"http://tianshan20081.github.io/categories/Android/Flutter/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/tags/Android/"},{"name":"Flutter","slug":"Flutter","permalink":"http://tianshan20081.github.io/tags/Flutter/"}]},{"title":"Centos7 升级 Kernel 内核版本","slug":"Centos7-升级-Kernel-内核版本","date":"2020-04-12T11:01:38.000Z","updated":"2020-04-12T11:26:43.000Z","comments":true,"path":"2020/04/12/Centos7-升级-Kernel-内核版本/","link":"","permalink":"http://tianshan20081.github.io/2020/04/12/Centos7-%E5%8D%87%E7%BA%A7-Kernel-%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC/","excerpt":"","text":"查看 系统 内核版本12345678910111213141516[root@host ~]# yum list kernel已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * base: repos.lax.quadranet.com * elrepo: repos.lax-noc.com * extras: mirrors.cat.pdx.edu * updates: repos-lax.psychz.netpgdg-common | 2.9 kB 00:00:00pgdg-common&#x2F;7&#x2F;x86_64&#x2F;primary_db | 125 kB 00:00:01已安装的软件包kernel.x86_64 3.10.0-957.1.3.el7 @updateskernel.x86_64 3.10.0-957.10.1.el7 @updateskernel.x86_64 3.10.0-1062.4.1.el7 @updateskernel.x86_64 3.10.0-1062.4.3.el7 @updateskernel.x86_64 3.10.0-1062.18.1.el7 @updates[root@host ~]# 12[root@host ~]# uname -r3.10.0-1062.18.1.el7.x86_64 升级安装ELRepo123456789101112131415161718192021222324252627282930313233343536373839404142434445rpm -Uvh http:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-4.el7.elrepo.noarch.rpmyum --enablerepo&#x3D;elrepo-kernel install -y kernel-lt[root@host ~]# yum --enablerepo&#x3D;elrepo-kernel install -y kernel-lt已加载插件：fastestmirrorLoading mirror speeds from cached hostfile * base: repos.lax.quadranet.com * elrepo: repos.lax-noc.com * elrepo-kernel: repos.lax-noc.com * extras: mirrors.cat.pdx.edu * updates: repos-lax.psychz.netelrepo-kernel | 2.9 kB 00:00:00elrepo-kernel&#x2F;primary_db | 1.9 MB 00:00:00正在解决依赖关系There are unfinished transactions remaining. You might consider running yum-complete-transaction, or &quot;yum-complete-transaction --cleanup-only&quot; and &quot;yum history redo last&quot;, first to finish them. If those don&#39;t work you&#39;ll have to try removing&#x2F;installing packages by hand (maybe package-cleanup can help).--&gt; 正在检查事务---&gt; 软件包 kernel-lt.x86_64.0.4.4.218-1.el7.elrepo 将被 安装--&gt; 解决依赖关系完成依赖关系解决&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Package 架构 版本 源 大小&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;正在安装: kernel-lt x86_64 4.4.218-1.el7.elrepo elrepo-kernel 39 M事务概要&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;安装 1 软件包总下载量：39 M安装大小：180 MDownloading packages:kernel-lt-4.4.218-1.el7.elrepo.x86_64.rpm | 39 MB 00:00:06Running transaction checkRunning transaction testTransaction test succeededRunning transaction 正在安装 : kernel-lt-4.4.218-1.el7.elrepo.x86_64 1&#x2F;1 验证中 : kernel-lt-4.4.218-1.el7.elrepo.x86_64 1&#x2F;1已安装: kernel-lt.x86_64 0:4.4.218-1.el7.elrepo完毕！ 查看当前实际启动顺序12[root@mz ~]# grub2-editenv listsaved_entry&#x3D;CentOS Linux (3.10.0-1062.9.1.el7.x86_64) 7 (Core) 设置开机从新内核启动12# &#x2F;&#x2F;grub2-set-default &#39;CentOS Linux (3.10.0-1062.9.1.el7.x86_64) 7 (Core)&#39;# grub2-set-default &#39;CentOS Linux (4.4.218-1.el7.elrepo.x86_64) 7 (Core)&#39; 重启 &amp;&amp; 查看内核版本12[root@host ~]# uname -srLinux 4.4.218-1.el7.elrepo.x86_64","categories":[],"tags":[]},{"title":"adb 获取 Android 基本信息","slug":"adb-获取-Android-基本信息","date":"2020-04-09T03:17:30.000Z","updated":"2020-04-11T02:31:20.000Z","comments":true,"path":"2020/04/09/adb-获取-Android-基本信息/","link":"","permalink":"http://tianshan20081.github.io/2020/04/09/adb-%E8%8E%B7%E5%8F%96-Android-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/","excerpt":"","text":"android_id什么是 android_id获取 android_id代码获取 1234567public static String getAndroidId(Context context) &#123; return Settings.System.getString(contentResolver, Settings.System.ANDROID_ID);&#125;public static String getAndroidId(Context context) &#123; return Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID);&#125; adb 获取 1234# adb shell content query --uri content://settings/secure/android_id --projection valueRow: 0 value=98078XXX96fe# adb shell settings get secure android_id98078XXX96fe SerialNumber1android.os.Build.SERIAL macAddress1234567891011121314151617181920/** * &lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt; * &lt;uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\" /&gt; * &lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" /&gt; * */requestPermission(arrayOf(Manifest.permission.CHANGE_WIFI_STATE), &#123; val macAddress: String? val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager val info = wifiManager.connectionInfo if (!wifiManager.isWifiEnabled) &#123; //必须先打开，才能获取到MAC地址 wifiManager.isWifiEnabled = true wifiManager.isWifiEnabled = false &#125; macAddress = info.macAddress macAddressBtn.text = \"macAddress:$&#123;macAddress&#125;\"&#125;, &#123;&#125;) subscriberId12345678910111213141516171819/** * &lt;uses-permission android:name = \"android.permission.READ_PHONE_STATE\" /&gt; * */requestPermission(arrayOf(Manifest.permission.READ_PHONE_STATE), &#123; val mTelephonyMgr = getSystemService(Context.TELEPHONY_SERVICE) as TelephonyManager if (ActivityCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE) == PackageManager.PERMISSION_GRANTED) &#123; val subscriberId = mTelephonyMgr.subscriberId //获取IMSI号 subscriberIdBtn.text = \"SubscriberId:$&#123;subscriberId&#125;\" val deviceId = mTelephonyMgr.deviceId //获取IMSI号 deviceIdBtn.text = \"Device Id:$&#123;deviceId&#125;\" var imei = if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123; mTelephonyMgr.imei &#125; else &#123; \"\" &#125; imeiIdBtn.text = \"IMEI Id:$&#123;imei&#125;\" &#125;&#125;, &#123;&#125;)","categories":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/tags/Android/"},{"name":"Adb","slug":"Adb","permalink":"http://tianshan20081.github.io/tags/Adb/"}]},{"title":"Android ART Dex2oat","slug":"Android-ART-Dex2oat","date":"2020-04-03T06:48:25.000Z","updated":"2020-04-03T06:50:55.000Z","comments":true,"path":"2020/04/03/Android-ART-Dex2oat/","link":"","permalink":"http://tianshan20081.github.io/2020/04/03/Android-ART-Dex2oat/","excerpt":"","text":"dex2oat 源码androidxref dex2oat.cc","categories":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/tags/Android/"},{"name":"ART","slug":"ART","permalink":"http://tianshan20081.github.io/tags/ART/"},{"name":"dex2oat","slug":"dex2oat","permalink":"http://tianshan20081.github.io/tags/dex2oat/"}]},{"title":"adb 获取 Android 手机本信息","slug":"2020-04-01-adb-获取-Android-手机本信息","date":"2020-04-01T02:20:16.000Z","updated":"2021-08-05T23:43:12.125Z","comments":true,"path":"2020/04/01/2020-04-01-adb-获取-Android-手机本信息/","link":"","permalink":"http://tianshan20081.github.io/2020/04/01/2020-04-01-adb-%E8%8E%B7%E5%8F%96-Android-%E6%89%8B%E6%9C%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/","excerpt":"","text":"如何查看 android 手机 编译信息编译信息 存储在 /system/build.prop 文件中，但是这个文件查看权限需要 root 之后才能查看，但是知道 具体属性的名称则可以通过 adb 命令查看。 获取 build.prop 文件的内容 创建模拟器; adb shell 进入刚创建的模拟器，执行 su 切换到 root 权限下面； 打开 /system/build.prop下面 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394$ adb shellgeneric_x86_64:&#x2F; $ sugeneric_x86_64:&#x2F; # pwd&#x2F;generic_x86_64:&#x2F; # cat &#x2F;system&#x2F;build.prop# begin common build properties# autogenerated by build&#x2F;make&#x2F;tools&#x2F;buildinfo_common.shro.system.build.date&#x3D;Fri Aug 2 05:01:12 UTC 2019ro.system.build.date.utc&#x3D;1564722072ro.system.build.fingerprint&#x3D;Android&#x2F;sdk_phone_x86_64&#x2F;generic_x86_64:10&#x2F;QPP6.190730.005.B1&#x2F;5775370:userdebug&#x2F;test-keysro.system.build.id&#x3D;QPP6.190730.005.B1ro.system.build.tags&#x3D;test-keysro.system.build.type&#x3D;userdebugro.system.build.version.incremental&#x3D;5775370ro.system.build.version.release&#x3D;10ro.system.build.version.sdk&#x3D;29ro.product.system.brand&#x3D;Androidro.product.system.device&#x3D;generic_x86_64ro.product.system.manufacturer&#x3D;unknownro.product.system.model&#x3D;Android SDK built for x86_64ro.product.system.name&#x3D;sdk_phone_x86_64# end common build properties# begin build properties# autogenerated by buildinfo.shro.build.id&#x3D;QPP6.190730.005.B1ro.build.display.id&#x3D;sdk_phone_x86_64-userdebug 10 QPP6.190730.005.B1 5775370 test-keysro.build.version.incremental&#x3D;5775370ro.build.version.sdk&#x3D;29ro.build.version.preview_sdk&#x3D;0ro.build.version.preview_sdk_fingerprint&#x3D;RELro.build.version.codename&#x3D;RELro.build.version.all_codenames&#x3D;RELro.build.version.release&#x3D;10ro.build.version.security_patch&#x3D;2019-08-01ro.build.version.base_os&#x3D;ro.build.version.min_supported_target_sdk&#x3D;23ro.build.date&#x3D;Fri Aug 2 05:01:12 UTC 2019ro.build.date.utc&#x3D;1564722072ro.build.type&#x3D;userdebugro.build.user&#x3D;android-buildro.build.host&#x3D;abfarm830ro.build.tags&#x3D;test-keysro.build.flavor&#x3D;sdk_phone_x86_64-userdebugro.build.ab_update&#x3D;false# ro.product.cpu.abi and ro.product.cpu.abi2 are obsolete,# use ro.product.cpu.abilist instead.ro.product.cpu.abi&#x3D;x86_64ro.product.cpu.abilist&#x3D;x86_64,x86ro.product.cpu.abilist32&#x3D;x86ro.product.cpu.abilist64&#x3D;x86_64ro.product.locale&#x3D;en-USro.wifi.channels&#x3D;# ro.build.product is obsolete; use ro.product.devicero.build.product&#x3D;generic_x86_64# Do not try to parse description or thumbprintro.build.description&#x3D;sdk_phone_x86_64-userdebug 10 QPP6.190730.005.B1 5775370 test-keys# end build properties## from build&#x2F;make&#x2F;target&#x2F;board&#x2F;gsi_system.prop## GSI always generate dex pre-opt in system imagero.cp_system_other_odex&#x3D;0# GSI always disables adb authenticationro.adb.secure&#x3D;0# GSI disables non-AOSP nnapi extensions on product partitionro.nnapi.extensions.deny_on_product&#x3D;true# TODO(b&#x2F;120679683): disable RescueParty before all problem apps solvedpersist.sys.disable_rescue&#x3D;true# TODO(b&#x2F;78105955): disable privapp_permissions checking before the bug solvedro.control_privapp_permissions&#x3D;disable# TODO(b&#x2F;136212765): the default for LMKro.lmk.kill_heaviest_task&#x3D;truero.lmk.kill_timeout_ms&#x3D;100ro.lmk.use_minfree_levels&#x3D;true# end of build&#x2F;make&#x2F;target&#x2F;board&#x2F;gsi_system.prop## ADDITIONAL_BUILD_PROPERTIES#ro.bionic.ld.warning&#x3D;1ro.treble.enabled&#x3D;truepersist.debug.dalvik.vm.core_platform_api_policy&#x3D;just-warndalvik.vm.lockprof.threshold&#x3D;500xmpp.auto-presence&#x3D;truero.config.nocheckin&#x3D;yesnet.bt.name&#x3D;Androidgeneric_x86_64:&#x2F; # adb 获取具体属性内容注：连接多个设备的时候，需要指定具体设备，-s 设备 ID查看 android sdk 版本号 12$ adb -s 0715f7535f8b0d34 shell getprop ro.build.version.sdk24 查看 android 系统版本号 12$ adb -s 0715f7535f8b0d34 shell getprop ro.build.version.release7.0 查看编译日期 1234$ adb -s 0715f7535f8b0d34 shell getprop ro.build.dateWed Aug 1 11:13:51 KST 2018$ adb -s 0715f7535f8b0d34 shell getprop ro.build.date.utc1533089631 查看 支持的 CPU 类型 12$ adb -s 0715f7535f8b0d34 shell getprop ro.product.cpu.abilistarm64-v8a,armeabi-v7a,armeabi 查看 fingerprint 12adb -s 0715f7535f8b0d34 shell getprop ro.build.fingerprintsamsung&#x2F;nobleltezc&#x2F;nobleltechn:7.0&#x2F;NRD90M&#x2F;N9200ZCS3DRH1:user&#x2F;release-keys 获取 全部属性查看全部属性 adb shell getprop","categories":[{"name":"Android 基本信息","slug":"Android-基本信息","permalink":"http://tianshan20081.github.io/categories/Android-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/"},{"name":"adb","slug":"Android-基本信息/adb","permalink":"http://tianshan20081.github.io/categories/Android-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/adb/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/tags/Android/"},{"name":"Adb","slug":"Adb","permalink":"http://tianshan20081.github.io/tags/Adb/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-29T05:17:35.000Z","updated":"2020-03-29T05:17:35.000Z","comments":true,"path":"2020/03/29/hello-world/","link":"","permalink":"http://tianshan20081.github.io/2020/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://tianshan20081.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo Hello","slug":"Hexo-Hello","permalink":"http://tianshan20081.github.io/tags/Hexo-Hello/"},{"name":"Hexo 入门","slug":"Hexo-入门","permalink":"http://tianshan20081.github.io/tags/Hexo-%E5%85%A5%E9%97%A8/"}]},{"title":"Hexo GitHub Page 上传图片","slug":"Hexo-GitHub-Page-上传图片","date":"2020-03-29T03:27:07.000Z","updated":"2020-04-23T04:17:35.000Z","comments":true,"path":"2020/03/29/Hexo-GitHub-Page-上传图片/","link":"","permalink":"http://tianshan20081.github.io/2020/03/29/Hexo-GitHub-Page-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/","excerpt":"","text":"图片需要在文章和首页中 同时出现 上传本地图片使用相对路径需要 配置 /_config.ymlpost_asset_folder: true然后 执行命令 hexo n post_name会在 source/_posts 下面 出现一个 post_name 文件夹和 post_name.md 的文件将图片存放在 post_name 文件夹 下面即可 使用 1![](big_image.jpg) 使用绝对路径12图片存储位置source&#x2F;images&#x2F;2020-03-29&#x2F;big_image.jpg 使用 1![](&#x2F;images&#x2F;2020-03-29&#x2F;big_image.jpg) 添加网络图片使用图床将图片上传至 图片服务器 七牛云、又拍云 、阿里云 或其他的，获取到图片下载链接 使用 1![](https:&#x2F;&#x2F;gb-imgs.oss-cn-beijing.aliyuncs.com&#x2F;big_image.jpg)","categories":[{"name":"Hexo 上传图片","slug":"Hexo-上传图片","permalink":"http://tianshan20081.github.io/categories/Hexo-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://tianshan20081.github.io/tags/Hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://tianshan20081.github.io/tags/GitHub-Pages/"},{"name":"Hexo 上传图片","slug":"Hexo-上传图片","permalink":"http://tianshan20081.github.io/tags/Hexo-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"}]},{"title":"react 入门","slug":"2020-03-28-react-入门","date":"2020-03-28T10:55:12.000Z","updated":"2020-03-29T05:17:04.000Z","comments":true,"path":"2020/03/28/2020-03-28-react-入门/","link":"","permalink":"http://tianshan20081.github.io/2020/03/28/2020-03-28-react-%E5%85%A5%E9%97%A8/","excerpt":"","text":"准备环境nodejs npm react 脚手架npm i create-react-app -g 创建 react 工程123mkdir react-app &amp;&amp; cd react-appcreate-react-app .yarn start","categories":[{"name":"React","slug":"React","permalink":"http://tianshan20081.github.io/categories/React/"},{"name":"Nodejs","slug":"React/Nodejs","permalink":"http://tianshan20081.github.io/categories/React/Nodejs/"}],"tags":[{"name":"React","slug":"React","permalink":"http://tianshan20081.github.io/tags/React/"}]},{"title":"Hexo Github Pages 搭建 Blog","slug":"Hexo-Github-Pages-搭建-Blog","date":"2020-03-28T10:32:52.000Z","updated":"2020-03-29T05:16:19.000Z","comments":true,"path":"2020/03/28/Hexo-Github-Pages-搭建-Blog/","link":"","permalink":"http://tianshan20081.github.io/2020/03/28/Hexo-Github-Pages-%E6%90%AD%E5%BB%BA-Blog/","excerpt":"","text":"安装工具 install nodejs brew install node install hexo npm i hexo -g 查看 hexo 版本12345678910111213141516171819202122 mz@Mz  ~  node --versionv13.11.0 mz@Mz  ~  npm --version6.14.4 mz@Mz  ~  hexo -verisonhexo-cli: 3.1.0os: Darwin 19.3.0 darwin x64node: 13.11.0v8: 7.9.317.25-node.29uv: 1.34.2zlib: 1.2.11brotli: 1.0.7ares: 1.15.0modules: 79nghttp2: 1.40.0napi: 6llhttp: 2.0.4openssl: 1.1.1dcldr: 35.1icu: 64.2tz: 2019aunicode: 12.1 常用命令 hexo clean hexo g hexo s hexo d 本地调试 hexo g #生成 hexo s #启动本地服务，进行文章预览调试 hexo d -g #或者直接作用组合命令","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://tianshan20081.github.io/tags/Hexo/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://tianshan20081.github.io/tags/Github-Pages/"},{"name":"Blog","slug":"Blog","permalink":"http://tianshan20081.github.io/tags/Blog/"}]}],"categories":[{"name":"C/C++","slug":"C-C","permalink":"http://tianshan20081.github.io/categories/C-C/"},{"name":"结构体","slug":"C-C/结构体","permalink":"http://tianshan20081.github.io/categories/C-C/%E7%BB%93%E6%9E%84%E4%BD%93/"},{"name":"Mac","slug":"Mac","permalink":"http://tianshan20081.github.io/categories/Mac/"},{"name":"Jenkins","slug":"Mac/Jenkins","permalink":"http://tianshan20081.github.io/categories/Mac/Jenkins/"},{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/categories/Android/"},{"name":"Flutter","slug":"Android/Flutter","permalink":"http://tianshan20081.github.io/categories/Android/Flutter/"},{"name":"Android 基本信息","slug":"Android-基本信息","permalink":"http://tianshan20081.github.io/categories/Android-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/"},{"name":"adb","slug":"Android-基本信息/adb","permalink":"http://tianshan20081.github.io/categories/Android-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF/adb/"},{"name":"Hexo","slug":"Hexo","permalink":"http://tianshan20081.github.io/categories/Hexo/"},{"name":"Hexo 上传图片","slug":"Hexo-上传图片","permalink":"http://tianshan20081.github.io/categories/Hexo-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"name":"React","slug":"React","permalink":"http://tianshan20081.github.io/categories/React/"},{"name":"Nodejs","slug":"React/Nodejs","permalink":"http://tianshan20081.github.io/categories/React/Nodejs/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://tianshan20081.github.io/tags/C-C/"},{"name":"Android Studio","slug":"Android-Studio","permalink":"http://tianshan20081.github.io/tags/Android-Studio/"},{"name":"源码关联","slug":"源码关联","permalink":"http://tianshan20081.github.io/tags/%E6%BA%90%E7%A0%81%E5%85%B3%E8%81%94/"},{"name":"Docker","slug":"Docker","permalink":"http://tianshan20081.github.io/tags/Docker/"},{"name":"Docker-compose","slug":"Docker-compose","permalink":"http://tianshan20081.github.io/tags/Docker-compose/"},{"name":"Flask","slug":"Flask","permalink":"http://tianshan20081.github.io/tags/Flask/"},{"name":"Mac","slug":"Mac","permalink":"http://tianshan20081.github.io/tags/Mac/"},{"name":"Mac 开机自启动","slug":"Mac-开机自启动","permalink":"http://tianshan20081.github.io/tags/Mac-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/"},{"name":"Jenkins","slug":"Jenkins","permalink":"http://tianshan20081.github.io/tags/Jenkins/"},{"name":"前端","slug":"前端","permalink":"http://tianshan20081.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ESLint","slug":"ESLint","permalink":"http://tianshan20081.github.io/tags/ESLint/"},{"name":"Android","slug":"Android","permalink":"http://tianshan20081.github.io/tags/Android/"},{"name":"Flutter","slug":"Flutter","permalink":"http://tianshan20081.github.io/tags/Flutter/"},{"name":"Adb","slug":"Adb","permalink":"http://tianshan20081.github.io/tags/Adb/"},{"name":"ART","slug":"ART","permalink":"http://tianshan20081.github.io/tags/ART/"},{"name":"dex2oat","slug":"dex2oat","permalink":"http://tianshan20081.github.io/tags/dex2oat/"},{"name":"Hexo Hello","slug":"Hexo-Hello","permalink":"http://tianshan20081.github.io/tags/Hexo-Hello/"},{"name":"Hexo 入门","slug":"Hexo-入门","permalink":"http://tianshan20081.github.io/tags/Hexo-%E5%85%A5%E9%97%A8/"},{"name":"Hexo","slug":"Hexo","permalink":"http://tianshan20081.github.io/tags/Hexo/"},{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://tianshan20081.github.io/tags/GitHub-Pages/"},{"name":"Hexo 上传图片","slug":"Hexo-上传图片","permalink":"http://tianshan20081.github.io/tags/Hexo-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"},{"name":"React","slug":"React","permalink":"http://tianshan20081.github.io/tags/React/"},{"name":"Github Pages","slug":"Github-Pages","permalink":"http://tianshan20081.github.io/tags/Github-Pages/"},{"name":"Blog","slug":"Blog","permalink":"http://tianshan20081.github.io/tags/Blog/"}]}